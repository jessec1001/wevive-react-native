import groovy.json.JsonSlurper

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    ndkVersion = "22.1.7171670"
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
    }

    buildTypes {
        debug {
            buildConfigField "boolean", "LIBRE_BUILD", "${rootProject.ext.libreBuild}"
            buildConfigField "boolean", "GOOGLE_SERVICES_ENABLED", "${rootProject.ext.googleServicesEnabled}"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "LIBRE_BUILD", "${rootProject.ext.libreBuild}"
            buildConfigField "boolean", "GOOGLE_SERVICES_ENABLED", "${rootProject.ext.googleServicesEnabled}"
        }
    }

    packagingOptions {
        //exclude "**/libjsc*.so"
        //exclude '**/libhermes-inspector.so'
        //exclude '**/libhermes-executor-debug.so'
        //pickFirst '**/libc++_shared.so'
    }

    sourceSets {
        main {
            java {
                exclude "test/"
            }
        }
    }
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.fragment:fragment:1.3.3'
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.0.0'

    //noinspection GradleDynamicVersion
    api 'com.facebook.react:react-native:+'
    //noinspection GradleDynamicVersion
    // JSC JS engine
    //implementation 'org.webkit:android-jsc:+'

    // Hermes JS engine
    def hermesPath = "../../node_modules/hermes-engine/android/"
    //debugImplementation files(hermesPath + "hermes-debug.aar")
    compileOnly files(hermesPath + "hermes-release.aar")

    implementation 'com.dropbox.core:dropbox-core-sdk:3.0.8'
    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation 'com.squareup.duktape:duktape-android:1.4.0'
    implementation 'com.google.code.gson:gson:2.8.7'

    if (rootProject.ext.libreBuild) {
        implementation(project(':react-native-device-info')) {
            exclude group: 'com.google.firebase'
            exclude group: 'com.google.android.gms'
            exclude group: 'com.android.installreferrer'
        }
    } else {
        implementation project(':react-native-device-info')
    }

    //implementation('com.yyl.vlc:vlc-android-sdk:3.1.4'){
    //   transitive = false
    //}
    testImplementation 'junit:junit:4.13.2'
}

publishing {
    publications {
        aarArchive(MavenPublication) {
            groupId 'org.jitsi.react'
            artifactId 'jitsi-meet-sdk'
            version System.env.OVERRIDE_SDK_VERSION ?: project.sdkVersion

            artifact("${project.buildDir}/outputs/aar/${project.name}-release.aar") {
                extension "aar"
            }
            pom.withXml {
                def pomXml = asNode()
                pomXml.appendNode('name', 'jitsi-meet-sdk')
                pomXml.appendNode('description', 'Jitsi Meet SDK for Android')
                def dependencies = pomXml.appendNode('dependencies')
                configurations.getByName('releaseCompileClasspath').getResolvedConfiguration().getFirstLevelModuleDependencies().each {
                    // The (third-party) React Native modules that we depend on
                    // are in source code form and do not have groupId. That is
                    // why we have a dedicated groupId for them. But the other
                    // dependencies come through Maven and, consequently, have
                    // groupId.
                    def groupId = it.moduleGroup
                    def artifactId = it.moduleName

                    if (artifactId.startsWith('react-native-') && groupId.equals('jitsi-meet')) {
                        groupId = rootProject.ext.moduleGroupId
                    }

                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', groupId)
                    dependency.appendNode('artifactId', artifactId)
                    dependency.appendNode('version', it.moduleVersion)
                }
                // Add Hermes dependency.
                def hermesPkg = new File("$rootDir/../node_modules/hermes-engine/package.json")
                def hermesVersion = new JsonSlurper().parseText(hermesPkg.text).version
                def hermesDependency = dependencies.appendNode('dependency')
                hermesDependency.appendNode('groupId', "com.facebook")
                hermesDependency.appendNode('artifactId', "hermes")
                hermesDependency.appendNode('version', hermesVersion)
            }
        }

    }
    repositories {
        maven {
            url rootProject.ext.mavenRepo
            if (!rootProject.ext.mavenRepo.startsWith("file")) {
                credentials {
                    username rootProject.ext.mavenUser
                    password rootProject.ext.mavenPassword
                }
            }
        }
    }
}

apply from: file("./native_modules.gradle"); applyNativeModulesAppBuildGradle(project)