diff --git a/node_modules/react-native-chat-plugin/ChatContainer.js b/node_modules/react-native-chat-plugin/ChatContainer.js
index 621e6d1..5877abe 100644
--- a/node_modules/react-native-chat-plugin/ChatContainer.js
+++ b/node_modules/react-native-chat-plugin/ChatContainer.js
@@ -46,6 +46,7 @@ export default function ChatContainer({ options, contacts, children }) {
   const user = ctx.getUser();
   const users = ctx.getUsers();
   const authenticationCallback = (res) => {
+    //console.error('auth', res);
     if (!res || !res.user) return;
     setTimeout(() => {
       socket.chat_user_id = res.user.id;
@@ -81,8 +82,13 @@ export default function ChatContainer({ options, contacts, children }) {
     }, 50);
   };
   React.useEffect(() => {
-    resendFailed(user.id)
-  }, [user.id])
+    //
+    if (connected && user) {
+      if (user && user.id) {
+        resendFailed(user.id)
+      }
+    }
+  }, [connected, user])
   React.useEffect(() => {
     ctx.addPhoneContacts(contacts);
   }, [contacts])
@@ -138,9 +144,8 @@ const emitEvents = (recreateKeys = false) => {
     socket.emit("conversations:fetch", options, async (res) => {
       if (res && res.success && Array.isArray(res.conversations)) {
         const conversations = await decryptConversationsBasic(res.conversations.filter(c => c !== null), socket.chat_private_key, ctx, recreateKeys);
-        ctx.setConversations(conversations);
         conversations.map(c=>{
-          ctx.saveConversationToDB(c)
+          ctx.saveConversationToDB(c);
           c.participants && c.participants.map(u=>{
             if (u.id) {
               ctx.saveUserToDB(u.id, u.avatar, u.username, u.phone_number, u.lastOnline);
@@ -151,6 +156,7 @@ const emitEvents = (recreateKeys = false) => {
           ctx.saveMessageToDB(c.id, event?.text, event?.owner ? event.owner.id : 0, event?.type, event?.id, event?.time);
           //c.lastEvent
         });
+        ctx.setConversations(conversations);
       }
     });
   });
@@ -161,7 +167,6 @@ const emitEvents = (recreateKeys = false) => {
     }
   });
   updateLastOnline();
-  resendFailed(user.id);
 };
   React.useEffect(() => {
     //if (init) return;
@@ -174,15 +179,16 @@ const emitEvents = (recreateKeys = false) => {
       for (let i=0;i<users.length;i++) {
         let user = users.item(i);
         user.userId = user.id;
-        user.avatar = user.path;
+        user.avatar = "file://"+user.path;
         user.phone_number = user.username;
         delete user.path;
         user.lastOnline = user.lastOnline * 1000;
         ctx.addUser(user);
         usersList[user.id] = user;
       }
+      //console.error(usersList);
       if (!userContext.authData.username) {
-        userContext.setAuthData(usersList[userContext.authData.id]);
+        //userContext.setAuthData(usersList[userContext.authData.id]);
       }
       
       ctx.getConversationsFromDB().then((conversations)=> {
@@ -235,7 +241,6 @@ const emitEvents = (recreateKeys = false) => {
         ctx.setConversations(conversationsArrayR);
         setInit(true);
         updateLastOnline();
-        resendFailed(user.id);
       });
     });
     const getEntity = (list, params) => {
@@ -368,7 +373,7 @@ const emitEvents = (recreateKeys = false) => {
       <>
         {children}
         { showRetryButton ? <Pressable style={styles.errorView} onPress={() => setRetry(!retry)}><Icon style={styles.errorIcon} name="refreshbold" /><Text style={styles.errorText}>
-          Disconnected
+          Disconnected: {authError}
         </Text></Pressable> : null }
       </>
     );
diff --git a/node_modules/react-native-chat-plugin/ChatContext/AuthReducer.js b/node_modules/react-native-chat-plugin/ChatContext/AuthReducer.js
index e356216..c23e233 100644
--- a/node_modules/react-native-chat-plugin/ChatContext/AuthReducer.js
+++ b/node_modules/react-native-chat-plugin/ChatContext/AuthReducer.js
@@ -67,11 +67,11 @@ export function createAuthActions(state, dispatch) {
       }
       setAuthenticationError("Lost connection to the server.");
       console.warn("Socket disconnected:", error);
-      if (error == 'ping timeout' || error == 'transport close' || error == 'transport error') {
+      //if (error == 'ping timeout' || error == 'transport close' || error == 'transport error') {
         authenticationTimeout = setTimeout(function () {
           authenticate(state.options, callback);
         }, 100);
-      }
+      //}
     };
   }
 
@@ -109,24 +109,20 @@ export function createAuthActions(state, dispatch) {
       return state.user && state.user.id;
     },
     setUpAuthenticationHooks(callback) {
-      // create handlers.
       const handleSocketError = createSocketErrorHandler(callback);
       const handleRequireAuthentication = createRequireAuthenticationHandler(callback);
       const handleSocketDisconnected = createSocketDisconnectedHandler();
-      socket.on('connect', () => {
+      const handleSocketConnected = () => {};
 
-      });
-      // handle connection error.
       socket.on("error", handleSocketError);
-
-      // handle disconnected.
+      socket.on('connect', handleSocketConnected);
       socket.on("disconnect", handleSocketDisconnected);
-
-      // reply last event on authentication complete.
       socket.on("users:require_authentication", handleRequireAuthentication);
 
       return function cleanAuthenticationHooks() {
         socket.off("error", handleSocketError);
+        socket.off('connect', handleSocketConnected);
+        socket.off("disconnect", handleSocketDisconnected);
         socket.off("users:require_authentication", handleRequireAuthentication);
       };
     },
diff --git a/node_modules/react-native-chat-plugin/ChatContext/ConversationReducer.js b/node_modules/react-native-chat-plugin/ChatContext/ConversationReducer.js
index e8395c1..3baabf6 100644
--- a/node_modules/react-native-chat-plugin/ChatContext/ConversationReducer.js
+++ b/node_modules/react-native-chat-plugin/ChatContext/ConversationReducer.js
@@ -11,7 +11,7 @@ const addConversations = (state, conversations) => {
     } else {
       if (newConversations[conversationIdx].participants) {
         currentParticipants = conversation.participants;
-        delete conversation.participants;
+        //delete conversation.participants;
       }
       if (newConversations[conversationIdx].lastEvent && conversation.lastEvent) {
         if (+ new Date(conversation.lastEvent.time) <  + new Date(newConversations[conversationIdx].lastEvent.time)) {
@@ -312,11 +312,12 @@ export function createConversationActions(state, dispatch) {
         if (!notOwner[0]) {
           return this.getCurrentUser().avatar;
         }
-        const notOwnerIdx = state.users.findIndex(u=>u.id == notOwner[0].id);
-        if (notOwnerIdx !== -1) {
-          return state.users[notOwnerIdx].avatar;
+        const notOwnerIdxs = notOwner.map(u => u.id);
+        const notOwnerIdx = state.users.map((u,i)=>notOwnerIdxs.indexOf(u.id) !== -1 ? i : '').filter(String);
+        if (notOwnerIdx.length) {
+          return notOwnerIdx.map(idx => state.users[idx].avatar);
         } 
-        return notOwner[0] ? notOwner[0].avatar : "";
+        return "";
       } return conversation.avatar;
     },
     getChatname(conversation) {
@@ -324,8 +325,9 @@ export function createConversationActions(state, dispatch) {
       if (!conversation) return "";
       if (typeof conversation.participants !== "undefined" && (conversation.name == "" || !conversation.name)) {
         const notOwner = conversation.participants.filter(f=>f.id != user.id)
-        const name = notOwner[0] ? this.getContactName(notOwner[0].username) : "Me";
-        return name;
+        if (!notOwner.length) return "Me";
+        const names = notOwner.map(u => this.getContactName(u.username));
+        return (names.length > 1 ? "Group chat ("+(names.length+1)+" users)" : names[0]);
       } return conversation.name;
     },
     getContactName(phone_number) {
@@ -333,9 +335,8 @@ export function createConversationActions(state, dispatch) {
       return contactIdx !== -1 ? state.phoneContacts[contactIdx].humanValue : (state.user.username !== phone_number && phone_number != 'Me' ? phone_number : "Me");
     },
     getUsernameByUserId(userId) {
-
       const users = state.users;
-      const userIdx = state.users.findIndex(u => u.userId == userId);
+      const userIdx = state.users.findIndex(u => u.userId == userId || u.id == userId);
       return userIdx !== -1 ? this.getContactName(users[userIdx].username) : `Me`; 
     },
     getUsers() {
diff --git a/node_modules/react-native-chat-plugin/ChatContext/index.js b/node_modules/react-native-chat-plugin/ChatContext/index.js
index 7752e79..2c93f00 100644
--- a/node_modules/react-native-chat-plugin/ChatContext/index.js
+++ b/node_modules/react-native-chat-plugin/ChatContext/index.js
@@ -331,7 +331,7 @@ export function ChatContextProvider({options,children,socketIoUrl, getDB, icon,
         resolve("");
         return;
       }
-      const path = filetype + "/" + SHA512(url);
+      const path = filetype + "/" + SHA512(url) + ".jpg";
       const dirExists = await RNFS.exists(RNFS.DocumentDirectoryPath + '/' + filetype);
       if (!dirExists) {
         await RNFS.mkdir(RNFS.DocumentDirectoryPath + '/' + filetype);
diff --git a/node_modules/react-native-chat-plugin/ChatScreen/ChatForm.js b/node_modules/react-native-chat-plugin/ChatScreen/ChatForm.js
index 2d8eeea..bcc2e96 100644
--- a/node_modules/react-native-chat-plugin/ChatScreen/ChatForm.js
+++ b/node_modules/react-native-chat-plugin/ChatScreen/ChatForm.js
@@ -11,6 +11,7 @@ import {launchCamera, launchImageLibrary} from "react-native-image-picker";
 
 import WebView from "react-native-webview";
 import uuid from 'uuid';
+import { responsiveWidth } from "react-native-responsive-dimensions";
 //import Recording from "react-native-recording";
 
 const sendButton = require("../images/sendbtn.png");
@@ -35,7 +36,7 @@ const styles = StyleSheet.create({
     paddingTop:13,
     margin: 10,
     marginLeft: 25,
-    marginRight: 25,
+    marginRight: 10,
     borderRadius: 8,
     paddingLeft: 40,
   },
@@ -47,7 +48,7 @@ const styles = StyleSheet.create({
     paddingRight: 10,
     height: "50%",
     margin: 10,
-    borderRadius: 50
+    borderRadius: 50,
   },
   btnText: {
     textAlign: "center",
@@ -56,11 +57,13 @@ const styles = StyleSheet.create({
   btnImage: {
     alignContent: "center",
     justifyContent: "center",
+    //backgroundColor: "red",
+    width: responsiveWidth(15)
   },
   btnImageStyles: {
     width: 38,
     height: 38,
-    right: 15,
+    //right: 15,
     top:-12,
   },
   btnIcon: {
@@ -157,9 +160,9 @@ export default function ChatForm({ conversation }) {
   }
   const sendMessage = React.useCallback(async (contents) => {
     const socket = getSocket();
+    setMessage("");
     const encrypted = await encryptMessage(contents, global.encryptionKeys.public_key, global.encryptionKeys.private_key);
     const messageToSend = encrypted.nonce + "|" + global.encryptionKeys.public_key + "|" + encrypted.encryptedMessage;
-    setMessage("");
     const localMsg = await ctx.saveMessageToDB(conversation.id, contents, user.id, "MESSAGE", uuidv4(), 0, false);
     const newMessage = {
       id: String(localMsg),
@@ -170,29 +173,29 @@ export default function ChatForm({ conversation }) {
       time: +Date.now(), 
       text: contents,
       is_delivered: false,
+      encrypted: true,
     };
     ctx.addEvent(newMessage);
-    setTimeout(()=>{
-      socket.emit("events:new_message", { conversationId: conversation.id, message: messageToSend, nonce: localMsg }, ({ success, error, event, nonce }) => {
-        if (!success && error) {
-          if (tries >= maxRetries) {
-            Alert.alert("Error", "Failed to send message");
-          } else {
-            setTries(tries + 1);
-            setTimeout(()=>{
-              sendMessage(contents);
-            }, 1000 * (1+tries * 2));
-          }
-        } else if (event) {
-          //console.warn('mark as read?', localMsg);
-          ctx.updateEvent(conversation.id, localMsg, {...event, text:contents, is_delivered:true})
-          ctx.updateMessageEvent(localMsg, event)
+    socket.emit("events:new_message", { conversationId: conversation.id, message: messageToSend, nonce: localMsg }, ({ success, error, event, nonce }) => {
+      if (!success && error) {
+        if (tries >= maxRetries) {
+          Alert.alert("Error", "Failed to send message");
+        } else {
+          setTries(tries + 1);
+          setTimeout(()=>{
+            sendMessage(contents);
+          }, 1000 * (1+tries * 2));
         }
-      });
-    },100)
+      } else if (event) {
+        ctx.updateEvent(conversation.id, localMsg, {...event, text:contents, is_delivered:true, encrypted: true})
+        ctx.updateMessageEvent(localMsg, event)
+      }
+    });
   },[]);
   const submit = React.useCallback(() => {
     if (message) {
+      sendMessage(message);
+      /*
       ctx.getDB().then((db)=> {
         db.executeSql(
           "SELECT * FROM conversations WHERE group_id = ?",
@@ -212,7 +215,7 @@ export default function ChatForm({ conversation }) {
       }).catch((e)=>{
         console.warn(e);
       });
-      
+      */
       Keyboard.dismiss();
     }
   },[message, ctx]);
@@ -279,9 +282,10 @@ export default function ChatForm({ conversation }) {
     <View style={styles.container}>
       <Image source={messageIcon} style={styles.messageIcon} />
       <TextInput
+        textContentType="none"
         textAlignVertical={"top"}
         numberOfLines={5}
-        multiline={false}
+        multiline={true}
         value={message}
         style={styles.txt}
         onSubmitEditing={submit}
diff --git a/node_modules/react-native-chat-plugin/ChatScreen/ChatScreen.js b/node_modules/react-native-chat-plugin/ChatScreen/ChatScreen.js
index 2419a3d..20b8887 100644
--- a/node_modules/react-native-chat-plugin/ChatScreen/ChatScreen.js
+++ b/node_modules/react-native-chat-plugin/ChatScreen/ChatScreen.js
@@ -138,7 +138,6 @@ export default function ChatScreen({ navigation, route }) {
   }
   const insets = useSafeArea();
   const [selectedEvent, setSelectedEvent] = React.useState(false);
-  const [showMenu, setShowMenu] = React.useState(false);
   const [reply, setReply] = React.useState(false);
   const [lastpage, setLastPage] = React.useState(false);
   const ctx = React.useContext(ChatContext);
diff --git a/node_modules/react-native-chat-plugin/Components/Header.js b/node_modules/react-native-chat-plugin/Components/Header.js
index 738ea59..d4ba23d 100644
--- a/node_modules/react-native-chat-plugin/Components/Header.js
+++ b/node_modules/react-native-chat-plugin/Components/Header.js
@@ -23,9 +23,8 @@ const styles = StyleSheet.create({
     width: 30,
     height: 30,
     borderRadius: 30,
-    marginRight: 20,
     position: "absolute",
-    left: 30,
+    left: 40,
     top: 0,
   },
   lastOnline: {
@@ -43,7 +42,12 @@ const styles = StyleSheet.create({
     paddingHorizontal: 100,
   }
 });
-
+const Avatar = ({avatar}) => {
+  if (typeof avatar == 'string') return <Image source={{url: avatar}} style={styles.avatar} />
+  return avatar  ? avatar.slice(0,5).map((a,i) => 
+    <Image source={{url: a}} style={{...styles.avatar, zIndex: i*1, left: 30+i*20}} />
+  ) : null;
+}
 export default function Header({ left, right, title, avatar, lastOnline }) {
   if (lastOnline) {
     moment.locale('en')
@@ -53,7 +57,7 @@ export default function Header({ left, right, title, avatar, lastOnline }) {
     <View style={styles.topContainer}>
       {left ? left : <View style={styles.emptyView} />}
       <View style={styles.userInfo}>
-        {!!avatar && <Image source={{url:avatar}} style={styles.avatar} />}
+        <Avatar avatar={avatar} />
         <View style={styles.chatName}>
           {title ? <Text style={styles.title} numberOfLines={1} ellipsizeMode={"tail"}>{title}</Text> : null}
           {lastOnline ? <Text style={styles.lastOnline} numberOfLines={1} ellipsizeMode={"tail"}>Online: {lastOnlineHumanized}</Text> : null}
diff --git a/node_modules/react-native-chat-plugin/Components/ProfilePreview.js b/node_modules/react-native-chat-plugin/Components/ProfilePreview.js
index 904817b..3298a5b 100644
--- a/node_modules/react-native-chat-plugin/Components/ProfilePreview.js
+++ b/node_modules/react-native-chat-plugin/Components/ProfilePreview.js
@@ -1,8 +1,6 @@
 import React from "react";
 import { View, Text, StyleSheet, Image } from "react-native";
 import PropTypes from "prop-types";
-
-import Colors from "../constants/Colors";
 import { UserPropType } from "../PropTypes";
 
 const styles = StyleSheet.create(
@@ -41,23 +39,14 @@ const styles = StyleSheet.create(
     }
   }
 );
-
+const defaultAvatar = require("../images/profile.png");
 const weviveLogo = require("../../../src/images/PNG/wewelogo.png");
 
 function ProfilePreview({ text, contacts, size }) {
   const imageUrls = contacts && contacts.filter(p => p.avatar).map(p => p.avatar);
-  
-  let color = null;//contacts && contacts.filter(p => p.color && p.color.length > 0).map(p => p.color)[0];
-  if (!color) {
-    color = Colors.ACCENT2;
-  } else {
-    if (color.length === 6) {
-      color = "#" + color;
-    }
-  }
-  const avatarSource = imageUrls[0] == 'default' ? weviveLogo : { uri: imageUrls[0] };
+  const avatarSource = !imageUrls || imageUrls[0] == 'default' ? weviveLogo : { uri: imageUrls[0] };
   let child;
-  if (imageUrls[0] == 'default') {
+  if (avatarSource == weviveLogo) {
     child = <Image style={[styles.image, { height: size + 1, width: size + 1 }]} source={avatarSource} />;
   } else if (Array.isArray(imageUrls) && imageUrls.length > 0) {
     child = <Image style={[styles.image, { height: size - 8, width: size - 8 }]} source={avatarSource} />;
@@ -66,7 +55,7 @@ function ProfilePreview({ text, contacts, size }) {
     //size = size || 50;
     //child = <Text style={styles.initials}>{initials}</Text>;
     child = <View style={[styles.emptyProfileContainer, { height: size - 8, width: size - 8 }]}>
-      <Image style={[styles.emptyProfileImage, { height: size - 8, width: size - 8 }]} source={require("../images/profile.png")} />
+      <Image style={[styles.emptyProfileImage, { height: size - 8, width: size - 8 }]} source={defaultAvatar} />
     </View>;
   }
 
@@ -78,7 +67,6 @@ function ProfilePreview({ text, contacts, size }) {
         {
           width: size,
           height: size,
-          backgroundColor: color,
         }
       ]}>
       {child}
diff --git a/node_modules/react-native-chat-plugin/ContactsScreen/ContactsScreen.js b/node_modules/react-native-chat-plugin/ContactsScreen/ContactsScreen.js
index a73d2b3..9c29aba 100644
--- a/node_modules/react-native-chat-plugin/ContactsScreen/ContactsScreen.js
+++ b/node_modules/react-native-chat-plugin/ContactsScreen/ContactsScreen.js
@@ -145,7 +145,7 @@ const staticConversations = [
     lastEvent: {
       text: "Latest news",
       owner: {
-        id: 999
+        id: "-1"
       },
       time: Date()
     },
@@ -157,7 +157,7 @@ const staticConversations = [
         contactName: "Wevive",
         avatar: 'default',
         owner: {
-          id: 999,
+          id: "-1",
           name: "AA",
           username: "asd"
         },
@@ -170,7 +170,7 @@ const staticConversations = [
         contactName: "Wevive",
         avatar: 'default',
         owner: {
-          id: 999,
+          id: "-1",
           name: "AA",
           username: "asd"
         },
@@ -178,7 +178,7 @@ const staticConversations = [
       }
     ],
     owner: {
-      id: 999
+      id: "-1",
     },
     participants: [
       {
diff --git a/node_modules/react-native-chat-plugin/PhoneContactsScreen/PhoneContactsScreen.js b/node_modules/react-native-chat-plugin/PhoneContactsScreen/PhoneContactsScreen.js
index 389e406..b75d7cb 100644
--- a/node_modules/react-native-chat-plugin/PhoneContactsScreen/PhoneContactsScreen.js
+++ b/node_modules/react-native-chat-plugin/PhoneContactsScreen/PhoneContactsScreen.js
@@ -1,7 +1,7 @@
 import React from "react";
-import { View, StyleSheet, Text, TouchableOpacity, FlatList } from "react-native";
+import { View, StyleSheet, Text, TouchableOpacity, FlatList, SectionList } from "react-native";
 
-//import AlphabetList from "react-native-flatlist-alphabet";
+import AlphabetList from "react-native-flatlist-alphabet";
 import { ChatContext } from "../ChatContext";
 import { NavigationPropType } from "../PropTypes";
 import LinearGradient from "react-native-linear-gradient";
@@ -13,6 +13,8 @@ import {ClientContext} from '../../../src/context/ClientContext';
 import { clearPhoneNumber } from "../../../src/utils/phonehelpers";
 import trans from "../../../src/utils/trans";
 import Icon from "../../../src/components/Icon";
+import getSectionData from "react-native-flatlist-alphabet/dist/utilities/getSectionData";
+import TextInput from "react-native-chat-plugin/Components/TextInput";
 
 
 const styles = StyleSheet.create({
@@ -170,7 +172,6 @@ const onShare = async (numbers, navigation) => {
 
 
 const renderSectionHeader = (section) => {
-  //return null;
   return (
     <View style={styles.sectionHeaderContainer}>
       <Text style={styles.sectionHeaderLabel}>{section.title}</Text>
@@ -178,21 +179,23 @@ const renderSectionHeader = (section) => {
   );
 };
 
-
-const Contact = ({label, humanValue, clearLabel, alreadyExists, numberOfFriends, marked, toggleSelected}) => {
-  return (
-    <TouchableOpacity onPress={()=>!alreadyExists && toggleSelected(label, marked)}>
-      <LinearGradient style={styles.listItemContainer} colors={['#fff','#f3f3f3']}>
-        <Text style={styles.listItemLabel}>{humanValue}</Text>
-        {alreadyExists && <Text style={styles.alreadyExists}>Wevive user</Text>}
-        {!alreadyExists && numberOfFriends > 0 && <Text style={styles.numberOfFriends}>{trans('chats.friend_of_',{count:numberOfFriends})}</Text>}
-        {!alreadyExists && <View style={!!marked ? styles.markedContactToggle : styles.contactToggle}>
-          {!!marked && <Icon name="ticks" style={styles.markTick}/>}
-        </View>}
-      </LinearGradient>
-    </TouchableOpacity>
-  );
-};
+class Contact extends React.PureComponent {
+  render() {
+    const {label, humanValue, clearLabel, alreadyExists, numberOfFriends, marked, toggleSelected} = this.props;
+    return (
+      <TouchableOpacity onPress={()=>!alreadyExists && toggleSelected(label, marked)}>
+        <LinearGradient style={styles.listItemContainer} colors={['#fff','#f3f3f3']}>
+          <Text style={styles.listItemLabel}>{humanValue}</Text>
+          {alreadyExists && <Text style={styles.alreadyExists}>Wevive user</Text>}
+          {!alreadyExists && numberOfFriends > 0 && <Text style={styles.numberOfFriends}>{trans('chats.friend_of_',{count:numberOfFriends})}</Text>}
+          {!alreadyExists && <View style={!!marked ? styles.markedContactToggle : styles.contactToggle}>
+            {!!marked && <Icon name="ticks" style={styles.markTick}/>}
+          </View>}
+        </LinearGradient>
+      </TouchableOpacity>
+    );
+  }
+}
 
 export default function PhoneContactsScreen({ navigation }) {
   
@@ -200,8 +203,30 @@ export default function PhoneContactsScreen({ navigation }) {
   const clientctx = React.useContext(ClientContext);
   const [selectedContacts, setSelectedContacts] = React.useState([]);
   const [filter, setFilter] = React.useState(false)
-  const [existingUsers, setExistingUsers] = React.useState({existing:[],contacts:[],friendCounts: []});
+  const [existingUsers, setExistingUsers] = React.useState({existing:[],contacts:[],friendCounts: [],init:false});
   const contacts = ctx.getPhoneContacts();
+  const [query, setQuery] = React.useState("");
+  function searchAsyncForContacts(ctx, query) {
+    searchForMessages(ctx, query).then((resultsFromDB) => {
+      if (JSON.stringify(resultsFromDB) != JSON.stringify(results)) {
+        setResults(resultsFromDB);
+      }
+    });
+  }
+  const displayContacts = React.useMemo(() => {
+    if (query && query.length > 0) {
+      const searchRegex = new RegExp(`${query}`, 'g');
+      return contacts.filter((c) => 
+        searchRegex.test(String(c.humanValue))
+        ||
+        searchRegex.test(String(c.clearLabel))
+        ||
+        searchRegex.test(String(c.label))
+      );
+    } else {
+      return contacts;
+    }
+  }, [query, contacts]);
   const getNumbers = () => {
     const numbers = [];
     contacts.forEach(c => {
@@ -213,12 +238,23 @@ export default function PhoneContactsScreen({ navigation }) {
         })
       }
     });
-    return numbers;
+    return [...new Set(numbers)];
   };
   React.useEffect(() => {
     const friends = [];
     const friendCounts = [];
+    global.appIsLoading('Syncing contacts..');
+    if (!global.isInternetReachable) {
+      global.appIsNotLoading();
+      setExistingUsers(
+        {
+          ...existingUsers,
+          init: true,
+        }
+      );
+    }
     APIService('phone-contacts/sync/',{numbers: getNumbers()}).then((r)=>{
+      global.appIsNotLoading();
       r.contacts.forEach(u => {
         friends.push(u.phone_number);
         friendCounts.push(u.users);
@@ -228,6 +264,7 @@ export default function PhoneContactsScreen({ navigation }) {
           existing: r.users.map(u => u.phone_number),
           contacts: friends,
           friendCounts: friendCounts,
+          init: true,
         }
       );
     });
@@ -246,42 +283,50 @@ export default function PhoneContactsScreen({ navigation }) {
   const goNext = () => {
     onShare(selectedContacts, navigation);
   }
-  const renderItem = ({item}) => 
-    <Contact
+  const renderItem = (item) => {
+    return <Contact
       toggleSelected={toggleSelected}
-      alreadyExists={existingUsers.existing.indexOf(item.clearNumber) !== -1}
+      alreadyExists={existingUsers.existing.indexOf(item.clearLabel) !== -1}
       label={item.label}
-      key={item.value}
+      //key={item.value}
       humanValue={item.humanValue}
       marked={selectedContacts.indexOf(item.label) !== -1}
-      numberOfFriends={existingUsers.contacts && existingUsers.contacts.indexOf(item.clearNumber) !== -1 ? existingUsers.friendCounts[existingUsers.contacts.indexOf(item.clearNumber)] - 1 : 0}
+      numberOfFriends={existingUsers.contacts && existingUsers.contacts.indexOf(item.clearLabel) !== -1 ? existingUsers.friendCounts[existingUsers.contacts.indexOf(item.clearLabel)] - 1 : 0}
     />;
-  return contacts && (
+  }
+  //sections = getSectionData(displayContacts || contacts || []);
+  return contacts && existingUsers.init && (
     <>
       <View style={styles.headerStyle}>
         <TouchableOpacity onPress={goBack}>
           <Text style={styles.headerButtonStyle}>Cancel</Text>
         </TouchableOpacity>
+        <Text style={styles.headerButtonStyle}>{selectedContacts.length > 0 ? selectedContacts.length : contacts.length} {selectedContacts.length > 0 ? "selected" : "contacts"} </Text>
         {selectedContacts.length > 0 && <TouchableOpacity onPress={goNext}>
           <Text style={styles.headerButtonStyle}>Next</Text>
         </TouchableOpacity>}
       </View>
+      <TextInput placeholder={"Search"} onChangeText={query => setQuery(query)} />
       <View style={styles.container}>
-        <FlatList
-          data={contacts}
+        <AlphabetList
+          data={displayContacts || contacts}
           indexLetterColor={'white'}
           indexLetterSize={15}
           alphabetContainer={styles.alphabetContainer}
           renderItem={renderItem}
           renderSectionHeader={renderSectionHeader}
           letterItemStyle={styles.letterItemStyle}
-          keyExtractor={(c) => c.label}
+          //keyExtractor={(c) => c.label}
+          //maxToRenderPerBatch={20}
+          //windowSize={3}
+          //updateCellsBatchingPeriod={1}
+          //initialNumToRender={10}
         />
       </View>
     </>
   );
 }
-
+//Contact.whyDidYouRender = true;
 //PhoneContactsScreen.whyDidYouRender = true;
 
 PhoneContactsScreen.propTypes = {
diff --git a/node_modules/react-native-chat-plugin/PropTypes.js b/node_modules/react-native-chat-plugin/PropTypes.js
index a5e3b06..2c5f0aa 100644
--- a/node_modules/react-native-chat-plugin/PropTypes.js
+++ b/node_modules/react-native-chat-plugin/PropTypes.js
@@ -6,7 +6,7 @@ export const NavigationPropType = PropType.shape({
 });
 
 export const UserPropType = PropType.shape({
-  id: PropType.string,
+  id: PropType.any,
   username: PropType.string.isRequired,
   color: PropType.string,
   avatar: PropType.string,
diff --git a/node_modules/react-native-chat-plugin/SearchContactsScreen/SearchContactsScreen.js b/node_modules/react-native-chat-plugin/SearchContactsScreen/SearchContactsScreen.js
index 99528da..e8a16b0 100644
--- a/node_modules/react-native-chat-plugin/SearchContactsScreen/SearchContactsScreen.js
+++ b/node_modules/react-native-chat-plugin/SearchContactsScreen/SearchContactsScreen.js
@@ -144,13 +144,14 @@ export default function SearchContactsScreen({navigation, route}) {
   const contacts = ctx.getPhoneContacts();
   const [friends, setFriends] = React.useState([]);
   React.useEffect(() =>{
+    const country = clientctx.geo.geo.country_code;
     const ffriends = {};
     contacts.forEach(c => {
-      const cleanedNumber = clearPhoneNumber(clientctx.geo.geo.country_code, c.label);
+      const cleanedNumber = clearPhoneNumber(country, c.label);
       ffriends[cleanedNumber] = c.humanValue;
     });
     setFriends(ffriends);
-  },[]);
+  },[clientctx]);
 
   const getUsers = () => {
     if (!query) {
diff --git a/node_modules/react-native-chat-plugin/index.js b/node_modules/react-native-chat-plugin/index.js
index c508376..2f2923b 100644
--- a/node_modules/react-native-chat-plugin/index.js
+++ b/node_modules/react-native-chat-plugin/index.js
@@ -28,7 +28,7 @@ const getContactName = (c, reverse) => {
 }
 
 export default function ChatModule({ socketIoUrl, options, icon, children }) {
-  const [contacts, setContacts] = React.useState([]);
+  const [contacts, setContacts] = React.useState(false);
   initSocket(socketIoUrl);
   const getDB = async () => {
     const db = await SQLCipherClient(options);
@@ -65,16 +65,16 @@ export default function ChatModule({ socketIoUrl, options, icon, children }) {
     return contacts
     .filter((r)=>(r.givenName?.length || r.familyName?.length))
     .filter((r)=>(r.phoneNumbers.length > 0 && r.phoneNumbers[0].number.length))
-    .map((r)=>(
+    .map((r,i)=>(
       { 
         givenName: r.givenName,
         familyName: r.familyName,
-        key:getContactName(r, true),
+        key:i,
         humanValue:getContactName(r),
         value:getContactName(r, true),
-        labels:r.phoneNumbers.map(p=>p.number),
+        labels:r.phoneNumbers.map(p=>clearPhoneNumber(geo.geo.country_code, p.number)),
         label: r.phoneNumbers[0].number,
-        clearLabel: clearPhoneNumber(clientctx.geo.geo.country_code, r.phoneNumbers[0].number)
+        clearLabel: clearPhoneNumber(geo.geo.country_code, r.phoneNumbers[0].number)
       }
     ))
     .sort((a,b)=> {
@@ -94,7 +94,7 @@ export default function ChatModule({ socketIoUrl, options, icon, children }) {
       .then((err)=> {
         Contacts.getAllWithoutPhotos().then(fetchedContacts => {
           const newContacts = getClearedContacts(fetchedContacts);
-          setContacts(newContacts);
+          setContacts(newContacts || []);
           deleteContactsFromDB();
           saveContactsToDB(newContacts);
         });
@@ -102,17 +102,20 @@ export default function ChatModule({ socketIoUrl, options, icon, children }) {
       );
     } else {
       Contacts.getAllWithoutPhotos().then(fetchedContacts => {
-        /*for (let i=0;i<1000;i++) {
-          fetchedContacts.push(
-            {"givenName": "Test "+i,"familyName":"Testo","phoneNumbers":[
-              {
-                "number":"+79211474434"+i
-              }
-            ]}
-          )
-        }*/
+        const test = false;
+        if (test) {
+          for (let i=0;i<300;i++) {
+            fetchedContacts.push(
+              {"givenName": "Test "+i,"familyName":"Testo","phoneNumbers":[
+                {
+                  "number":"+79211474434"+i
+                }
+              ]}
+            )
+          }
+        }
         const newContacts = getClearedContacts(fetchedContacts);
-        setContacts(newContacts);
+        setContacts(newContacts || []);
         deleteContactsFromDB();
         saveContactsToDB(newContacts);
       });
@@ -120,7 +123,7 @@ export default function ChatModule({ socketIoUrl, options, icon, children }) {
   }
   React.useEffect(() => {
     if (!geo) return;
-    getDB().then(async (db)=> {
+    /*getDB().then(async (db)=> {
       const dbContactsArray = [];
       const [dbContacts] = await db.executeSql("SELECT * FROM contacts ORDER BY familyName ASC LIMIT 10000");
       for (let i=0;i<dbContacts.rows.length;i++) {
@@ -132,22 +135,24 @@ export default function ChatModule({ socketIoUrl, options, icon, children }) {
         });
       }
       if (false && dbContactsArray.length) {
-        setContacts(dbContactsArray);
+        setContacts(dbContactsArray || []);
         //syncContacts();
       } else {
         syncContacts();
         //clearTimeout(syncTimeout);
         
       }
-    });
+    });*/
+    syncContacts();
   },[geo]);
   React.useEffect(() => {
-    if (!contacts.length || typeof geo.geo == 'undefined') {
+    if (!contacts || !contacts.length || typeof geo.geo == 'undefined') {
       global.appIsLoading("Loading, please wait..");
     } else {
       global.appIsNotLoading();
     }
-  },[contacts, geo])
+  },[contacts, geo]);
+  if (!contacts) return null;
   return (
     <ChatContextProvider options={options} socketIoUrl={socketIoUrl} getDB={getDB} icon={icon}>
       <ChatContainer options={options} contacts={contacts}>
@@ -157,6 +162,8 @@ export default function ChatModule({ socketIoUrl, options, icon, children }) {
   );
 }
 
+
+ChatModule.whyDidYouRender = true;
 ChatModule.propTypes = {
   options: PropTypes.object.isRequired,
   socketIoUrl: PropTypes.string.isRequired,
diff --git a/node_modules/react-native-chat-plugin/utils/SQLCipherClient.js b/node_modules/react-native-chat-plugin/utils/SQLCipherClient.js
index 0433613..b94e8a8 100644
--- a/node_modules/react-native-chat-plugin/utils/SQLCipherClient.js
+++ b/node_modules/react-native-chat-plugin/utils/SQLCipherClient.js
@@ -4,7 +4,7 @@ SQLite.DEBUG(false);
 SQLite.enablePromise(true);
 let init = false;
 let db = null;
-let db_version = 77;
+let db_version = 78;
 export function getEncryptionKeys(context) {
   return new Promise((resolve, reject) => {
     context.getDB().then((db) => {
