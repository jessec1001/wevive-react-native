diff --git a/node_modules/react-native-chat-plugin/ChatContainer.js b/node_modules/react-native-chat-plugin/ChatContainer.js
index c0d4abb..822bb1d 100644
--- a/node_modules/react-native-chat-plugin/ChatContainer.js
+++ b/node_modules/react-native-chat-plugin/ChatContainer.js
@@ -2,20 +2,12 @@ import React from "react";
 import PropTypes from "prop-types";
 import { View, Text, StyleSheet, Alert } from "react-native";
 
-import PhoneContactsScreen from "./PhoneContactsScreen/PhoneContactsScreen";
-import ContactsScreen from "./ContactsScreen/ContactsScreen";
-import { NavigationContainer } from "@react-navigation/native";
-import { createStackNavigator } from "@react-navigation/stack";
 import { ChatContext } from "./ChatContext";
 import { getSocket } from "./utils/SocketIOClient";
-import ChatScreen from "./ChatScreen/ChatScreen";
-import SearchContactsScreen from "./SearchContactsScreen/SearchContactsScreen";
 import PillButton from "./Components/PillButton";
 import Colors from "./constants/Colors";
 import { getEncryptionKeys } from "./utils/SQLCipherClient";
 import { decryptConversations, decryptEvents, recreateEncryptionKeys, resendEncryptionKeys} from "./utils/ChatEncryption";
-
-const Stack = createStackNavigator();
 const styles = StyleSheet.create({
   errorView: {
     flex: 1,
@@ -28,14 +20,9 @@ const styles = StyleSheet.create({
   },
 });
 
-const defaultOptions = {
-  headerShown: false,
-  cardStyle: {
-    backgroundColor: Colors.BACKGROUND,
-  },
-};
 
-export default function ChatContainer({ options }) {
+
+export default function ChatContainer({ options, children }) {
   const ctx = React.useContext(ChatContext);
   const socket = getSocket();
   const [retry, setRetry] = React.useState(false);
@@ -154,16 +141,7 @@ export default function ChatContainer({ options }) {
     );
   }
 
-  return (
-    <NavigationContainer independent={true}>
-      <Stack.Navigator>
-        <Stack.Screen component={ContactsScreen} name={"ContactsScreen"} options={defaultOptions} />
-        <Stack.Screen component={PhoneContactsScreen} name={"PhoneContactsScreen"} options={defaultOptions} />
-        <Stack.Screen component={ChatScreen} name={"ChatScreen"} options={defaultOptions} />
-        <Stack.Screen component={SearchContactsScreen} name={"SearchContactsScreen"} options={defaultOptions} />
-      </Stack.Navigator>
-    </NavigationContainer>
-  );
+  return (children);
 }
 
 ChatContainer.propTypes = {
diff --git a/node_modules/react-native-chat-plugin/ChatContext/index.js b/node_modules/react-native-chat-plugin/ChatContext/index.js
index f9bc1dc..531d7ed 100644
--- a/node_modules/react-native-chat-plugin/ChatContext/index.js
+++ b/node_modules/react-native-chat-plugin/ChatContext/index.js
@@ -17,7 +17,7 @@ const reducer = combineReducers(
   settingsReducer
 );
 
-export function ChatContextProvider({options,children,socketIoUrl, db, icon, contacts}) {
+export function ChatContextProvider({options,children,socketIoUrl, getDB, icon, contacts}) {
   const [state, dispatch] = React.useReducer(reducer, ChatInitialState);
   const context = React.useMemo(
     () => {
@@ -26,9 +26,7 @@ export function ChatContextProvider({options,children,socketIoUrl, db, icon, con
         ...createAuthActions(state, dispatch),
         ...createChatActions(state, dispatch),
         ...createConversationActions(state, dispatch),
-        getDB() {
-          return db;
-        },
+        getDB,
         contacts,
         icon
       });
@@ -47,5 +45,5 @@ ChatContextProvider.propTypes = {
   options: PropTypes.object.isRequired,
   children: PropTypes.element.isRequired,
   socketIoUrl: PropTypes.string.isRequired,
-  db: PropTypes.object.isRequired,
+  getDB: PropTypes.func.isRequired,
 };
diff --git a/node_modules/react-native-chat-plugin/ChatNavigation.js b/node_modules/react-native-chat-plugin/ChatNavigation.js
new file mode 100644
index 0000000..871a1d3
--- /dev/null
+++ b/node_modules/react-native-chat-plugin/ChatNavigation.js
@@ -0,0 +1,8 @@
+import * as React from 'react';
+
+export const navigationRef = React.createRef();
+
+export function navigate(name, params) {
+  //console.warn(navigationRef.current);
+  navigationRef.current?.navigate(name, params);
+}
\ No newline at end of file
diff --git a/node_modules/react-native-chat-plugin/ChatNavigator.js b/node_modules/react-native-chat-plugin/ChatNavigator.js
new file mode 100644
index 0000000..609e264
--- /dev/null
+++ b/node_modules/react-native-chat-plugin/ChatNavigator.js
@@ -0,0 +1,30 @@
+import React from "react";
+import PhoneContactsScreen from "./PhoneContactsScreen/PhoneContactsScreen";
+import ContactsScreen from "./ContactsScreen/ContactsScreen";
+import ChatScreen from "./ChatScreen/ChatScreen";
+import SearchContactsScreen from "./SearchContactsScreen/SearchContactsScreen";
+
+import { NavigationContainer } from "@react-navigation/native";
+import { createStackNavigator } from "@react-navigation/stack";
+import Colors from "./constants/Colors";
+import ChatScreen from "./ChatScreen/ChatScreen";
+import SearchContactsScreen from "./SearchContactsScreen/SearchContactsScreen";
+
+import navigationRef from './ChatNavigation';
+import { stubFalse } from "lodash";
+const defaultOptions = {
+    headerShown: false,
+    cardStyle: {
+      backgroundColor: Colors.BACKGROUND,
+    },
+};
+const Stack = createStackNavigator();
+
+export default function ChatNavigator() {
+    return <Stack.Navigator screenOptions={{gestureEnabled: false}}>
+        <Stack.Screen component={ContactsScreen} name={"ContactsScreen"} options={defaultOptions} />
+        <Stack.Screen component={PhoneContactsScreen} name={"PhoneContactsScreen"} options={defaultOptions} />
+        <Stack.Screen component={ChatScreen} name={"ChatScreen"} options={defaultOptions} />
+        <Stack.Screen component={SearchContactsScreen} name={"SearchContactsScreen"} options={defaultOptions} />
+    </Stack.Navigator>
+}
\ No newline at end of file
diff --git a/node_modules/react-native-chat-plugin/ChatScreen/ChatForm.js b/node_modules/react-native-chat-plugin/ChatScreen/ChatForm.js
index 5388ef0..086949d 100644
--- a/node_modules/react-native-chat-plugin/ChatScreen/ChatForm.js
+++ b/node_modules/react-native-chat-plugin/ChatScreen/ChatForm.js
@@ -10,7 +10,7 @@ import {encryptChatMessage} from "../utils/ChatEncryption";
 import {launchCamera, launchImageLibrary} from "react-native-image-picker";
 
 import WebView from "react-native-webview";
-import Recording from "react-native-recording";
+//import Recording from "react-native-recording";
 
 const sendButton = require("../images/sendbtn.png");
 const styles = StyleSheet.create({
@@ -147,6 +147,7 @@ export default function ChatForm({ conversation }) {
 
   const sendMessage = React.useCallback((contents) => {
     const socket = getSocket();
+    setMessage("");
     socket.emit("events:new_message", { conversationId: conversation.id, message: contents }, ({ success, error }) => {
       if (!success && error) {
         if (tries >= maxRetries) {
@@ -162,7 +163,6 @@ export default function ChatForm({ conversation }) {
     });
   },[]);
   const submit = React.useCallback(() => {
-    setMessage("");
     if (message) {
       ctx.getDB().then((db)=> {
         db.executeSql(
@@ -177,7 +177,11 @@ export default function ChatForm({ conversation }) {
           } else {
             sendMessage(message);
           }
+        }).catch((e) => {
+          console.warn(e);
         });
+      }).catch((e)=>{
+        console.warn(e);
       });
       
       Keyboard.dismiss();
@@ -193,7 +197,7 @@ export default function ChatForm({ conversation }) {
 
     });
   };
-  Recording.stop();
+  //Recording.stop();
 
   const [audioWebview, setWebView] = React.useState(false);
   const [audioLoaded, setAudioLoaded] = React.useState(false);
@@ -235,7 +239,7 @@ export default function ChatForm({ conversation }) {
       <TextInput
         textAlignVertical={"top"}
         numberOfLines={5}
-        multiline={true}
+        multiline={false}
         value={message}
         style={styles.txt}
         onSubmitEditing={submit}
diff --git a/node_modules/react-native-chat-plugin/ChatScreen/ChatScreen.js b/node_modules/react-native-chat-plugin/ChatScreen/ChatScreen.js
index bbdff8a..4a08b15 100644
--- a/node_modules/react-native-chat-plugin/ChatScreen/ChatScreen.js
+++ b/node_modules/react-native-chat-plugin/ChatScreen/ChatScreen.js
@@ -106,9 +106,9 @@ export default function ChatScreen({ navigation, route }) {
   let offset = 30 + insets.top;
   return (
     <>
-      <KeyboardAvoidingView  keyboardVerticalOffset={offset} style={styles.container} behavior={Platform.OS == "ios" ? "padding" : "height" }>
+      <View style={styles.container}>
         <Header
-          left={<PillButton text="Back" onPress={() => navigation.goBack()} />}
+          right={<PillButton text="Call" onPress={() => navigation.navigate("VideoCalls",{callId:conversation.id})} />}
           title={conversation.name || "Chat"} />
         <View style={styles.inner}>
           <View style={styles.list}>
@@ -125,7 +125,7 @@ export default function ChatScreen({ navigation, route }) {
             </ImageBackground>
           </View>
         </View>
-      </KeyboardAvoidingView>
+      </View>
     </>
   );
 }
diff --git a/node_modules/react-native-chat-plugin/ChatScreen/MessageItem.js b/node_modules/react-native-chat-plugin/ChatScreen/MessageItem.js
index 50d322e..51c91f6 100644
--- a/node_modules/react-native-chat-plugin/ChatScreen/MessageItem.js
+++ b/node_modules/react-native-chat-plugin/ChatScreen/MessageItem.js
@@ -20,7 +20,8 @@ const styles = StyleSheet.create({
   message: {
     borderRadius: 15,
     backgroundColor: "rgb(223,223,223)",
-    padding: 10,
+    padding: 15,
+    paddingHorizontal: 25,
     marginLeft: 25,
     marginRight: 80,
     marginVertical: 8,
@@ -65,22 +66,27 @@ const styles = StyleSheet.create({
   },
   time: {
     textAlign: "right",
-    fontSize: 10,
+    fontSize: 9,
     fontWeight: "300",
     opacity: 0.4,
     color: "black",
+    left: 3,
+  },
+  timeBox: {
+    flexDirection: "row",
+    alignSelf: "flex-end",
+    left: 5,
+    top: 10,
   },
   readIndicator: {
-    position: "absolute",
-    bottom: 3,
-    right: 35,
-    fontSize: 10,
+    fontSize: 8,
+    left: 11,
+    top: 1,
   },
   deliveryIndicator: {
-    position: "absolute",
-    bottom: 3,
-    right: 25,
-    fontSize: 10,
+    fontSize: 8,
+    left: 10,
+    top: 1,
   },
   likeIndicatorBox: {
     position: "absolute",
@@ -267,19 +273,21 @@ function Message({ event, text, time, author, isOwn, encrypted, menu, setShowMen
         <Text style={styles.author}>{author}</Text>
         <Text style={styles.body}>{text}</Text>
         {encrypted ? <Image source={lockIcon} style={styles.encryptedIcon} /> : null }
-        <Text style={styles.time}>{(new Date(time)).toLocaleDateString()} {(new Date(time)).toLocaleTimeString()}</Text>
-        <Text style={styles.readIndicator}>
-          <Icon name="ticks" color={"rgb(228,140,58)"} />
-        </Text>
-        <Text style={styles.deliveryIndicator}>
-          <Icon name="ticks" color={"rgb(228,140,58)"} />
-        </Text>
-        <Pressable style={styles.likeIndicatorBox} onPress={()=>sendLike(event)} onLongPress={()=>sendDislike(event)}>
+        <View style={styles.timeBox}>
+          <Text style={styles.time}>{(new Date(time)).toLocaleDateString()} {(new Date(time)).toLocaleTimeString()}</Text>
+          <Text style={styles.readIndicator}>
+            <Icon name="ticks" color={"rgb(228,140,58)"} size={8} />
+          </Text>
+          <Text style={styles.deliveryIndicator}>
+            <Icon name="ticks" color={"rgb(228,140,58)"} size={8}/>
+          </Text>
+        </View>
+        <TouchableOpacity style={styles.likeIndicatorBox} onPress={()=>sendLike(event)} onLongPress={()=>sendDislike(event)}>
           <>
             <Icon name={likes > 0 ? "heart" : "ei-heart"} color={"#f44"} style={likes > 0 ? styles.likeIndicator : styles.emptyLikeIndicator} />
             {likes > 0 && <Text style={styles.likeText}>{likes}</Text>}
           </>
-        </Pressable>
+        </TouchableOpacity>
         {menu && Menu({event, isOwn, Icon, setShowMenu, viewRef})}
       </>
     </TouchableHighlight>
diff --git a/node_modules/react-native-chat-plugin/ChatScreen/MessagesList.js b/node_modules/react-native-chat-plugin/ChatScreen/MessagesList.js
index d7b227a..6af932a 100644
--- a/node_modules/react-native-chat-plugin/ChatScreen/MessagesList.js
+++ b/node_modules/react-native-chat-plugin/ChatScreen/MessagesList.js
@@ -1,5 +1,5 @@
 import React from "react";
-import { FlatList } from "react-native";
+import { FlatList, View } from "react-native";
 import PropTypes from "prop-types";
 
 import MessageItem from "./MessageItem";
@@ -15,13 +15,16 @@ renderItem.propTypes = {
 
 export default function MessageList({ events, onEndReached, showMenu, setShowMenu }) {
   return (
-    <FlatList
-      inverted={true}
-      data={[...events].reverse()}
-      renderItem={({item}) => renderItem({item, showMenu, setShowMenu})}
-      onEndReached={onEndReached}
-      onEndReachedThreshold={0.5}
-    />
+    <View style={{flex: 1}}>
+      <FlatList
+        inverted
+        data={[...events.reverse()]}
+        renderItem={({item}) => renderItem({item, showMenu, setShowMenu})}
+        onEndReached={onEndReached}
+        onEndReachedThreshold={0.5}
+        removeClippedSubviews={false}
+      />
+    </View>
   );
 }
 MessageList.propTypes = {
diff --git a/node_modules/react-native-chat-plugin/Components/PillButton.js b/node_modules/react-native-chat-plugin/Components/PillButton.js
index 42efb16..f2714f7 100644
--- a/node_modules/react-native-chat-plugin/Components/PillButton.js
+++ b/node_modules/react-native-chat-plugin/Components/PillButton.js
@@ -13,6 +13,7 @@ const styles = StyleSheet.create({
     margin: 1,
     paddingVertical: 10,
     paddingHorizontal: 8,
+    right: 5,
   },
   buttonText: {
     color: Colors.BACKGROUND,
diff --git a/node_modules/react-native-chat-plugin/ContactsScreen/ContactsScreen.js b/node_modules/react-native-chat-plugin/ContactsScreen/ContactsScreen.js
index fa4d21e..232c5be 100644
--- a/node_modules/react-native-chat-plugin/ContactsScreen/ContactsScreen.js
+++ b/node_modules/react-native-chat-plugin/ContactsScreen/ContactsScreen.js
@@ -16,6 +16,7 @@ const closeIcon = require("../images/close.png");
 const styles = StyleSheet.create({
   container: {
     flex: 1,
+    zIndex: 1,
   },
   buttonsContainer: {
     flexDirection: "row",
@@ -27,11 +28,17 @@ const styles = StyleSheet.create({
     flex: 1,
     flexDirection: "column",
   },
+  leftSwipeContainer: {
+    alignSelf: "flex-start",
+    flexDirection: "row",
+    width: 120,
+    zIndex: 10,
+    top: 5
+  }, 
   deleteContainer: {
-    flex: 1,
     alignSelf: "flex-end",
     flexDirection: "row",
-    width: 120,
+    width: 180,
     zIndex: 10,
     top: 5
   },
@@ -48,7 +55,22 @@ const styles = StyleSheet.create({
     flexDirection: "column",
     justifyContent: "center",
     backgroundColor: "rgb(130,180,120)"
-    
+  },
+  pinView: {
+    width: 60,
+    height: "100%",
+    alignItems: "center",
+    flexDirection: "column",
+    justifyContent: "center",
+    backgroundColor: "rgb(77,146,163)"
+  },
+  unreadView: {
+    width: 60,
+    height: "100%",
+    alignItems: "center",
+    flexDirection: "column",
+    justifyContent: "center",
+    backgroundColor: "rgb(111,111,111)"
   },
   muteText: {
     width:25,
@@ -66,14 +88,21 @@ const styles = StyleSheet.create({
     fontSize: 11,
     marginTop: 5,
   },
+  archiveView: {
+    width: 60,
+    height: "100%",
+    alignItems: "center",
+    flexDirection: "column",
+    justifyContent: "center",
+    backgroundColor: "rgb(111,111,111)"
+  },
   deleteView: {
     width: 60,
     height: "100%",
     alignItems: "center",
     flexDirection: "column",
     justifyContent: "center",
-    backgroundColor: "rgb(227,140,58)"
-    
+    backgroundColor: "rgb(201, 66, 59)"
   },
   deleteText: {
     width:25,
@@ -101,34 +130,13 @@ const styles = StyleSheet.create({
     backgroundColor: "rgb(145,145,145)",
     borderRadius: 30,
     height: 400,
+  },
+  hiddenItemContainer: {
+    flexDirection: "row",
+    justifyContent: "space-between",
   }
 });
 const chatWallpaper = require("../images/chat_background.png");
-const renderConversation = (conversation, onPress) => {
-  return (
-    <ContactComponent conversation={conversation} onPress={onPress} />
-  );
-};
-
-const renderHiddenItem = (item, ctx) => {
-  const Icon = ctx.icon;
-  return (
-    <View style={styles.deleteContainer}>
-      <TouchableOpacity style={styles.deleteViewParent} onPress={() => ctx.deleteConversation(item.id, false)}>
-        <View style={styles.muteView}>
-          <Icon name="mute-icon"  style={styles.muteText} />
-          <Text style={styles.muteTextText}>Mute</Text>
-        </View>
-      </TouchableOpacity>
-      <TouchableOpacity style={styles.deleteViewParent} onPress={() => ctx.muteConversation(item.id, false)}>
-        <View style={styles.deleteView}>
-          <Icon name="trash"  style={styles.deleteText} />
-          <Text style={styles.deleteTextText}>Delete</Text>
-        </View>
-      </TouchableOpacity>
-    </View>
-  );
-};
 
 export default function ConversationList({ navigation }) {
   const ctx = React.useContext(ChatContext);
@@ -182,26 +190,77 @@ export default function ConversationList({ navigation }) {
     <PillButton text="New Public Channel" onPress={() => navigation.navigate("SearchContactsScreen")} />
     <PillButton text="New 1 to 1 Chat" onPress={() => navigation.navigate("SearchContactsScreen")} />
   </>
+  const keyExtractor = item => item.id;
+
+  const renderConversation = ({item}) => {
+    return (
+      <ContactComponent conversation={item} onPress={onPress} />
+    );
+  };
+  
+  const renderHiddenItem = ({item}) => {
+    const Icon = ctx.icon;
+    return (
+      <View style={styles.hiddenItemContainer}>
+        <View style={styles.leftSwipeContainer}>
+          <TouchableOpacity style={styles.deleteViewParent} onPress={() => ctx.deleteConversation(item.id, false)}>
+            <View style={styles.unreadView}>
+              <Icon name="unread"  style={styles.muteText} />
+              <Text style={styles.muteTextText}>Unread</Text>
+            </View>
+          </TouchableOpacity>
+          <TouchableOpacity style={styles.deleteViewParent} onPress={() => ctx.muteConversation(item.id, false)}>
+            <View style={styles.pinView}>
+              <Icon name="office-push-pin"  style={styles.deleteText} />
+              <Text style={styles.deleteTextText}>Pin</Text>
+            </View>
+          </TouchableOpacity>
+        </View>
+  
+        <View style={styles.deleteContainer}>
+          <TouchableOpacity style={styles.deleteViewParent} onPress={() => ctx.deleteConversation(item.id, false)}>
+            <View style={styles.muteView}>
+              <Icon name="mute-icon"  style={styles.muteText} />
+              <Text style={styles.muteTextText}>Mute</Text>
+            </View>
+          </TouchableOpacity>
+          <TouchableOpacity style={styles.deleteViewParent} onPress={() => ctx.muteConversation(item.id, false)}>
+            <View style={styles.deleteView}>
+              <Icon name="trash"  style={styles.deleteText} />
+              <Text style={styles.deleteTextText}>Delete</Text>
+            </View>
+          </TouchableOpacity>
+          <TouchableOpacity style={styles.deleteViewParent} onPress={() => ctx.muteConversation(item.id, false)}>
+            <View style={styles.archiveView}>
+              <Icon name="archive"  style={styles.deleteText} />
+              <Text style={styles.deleteTextText}>Archive</Text>
+            </View>
+          </TouchableOpacity>
+        </View>
+      </View>
+    );
+  };
+
+  
   return (
     <View style={styles.container}>
       <Header />
       <TextInput placeholder={"Search"} onChangeText={query => setQuery(query)} />
       <ImageBackground source={chatWallpaper} style={styles.chatBackground}>
-        <View style={styles.buttonsContainer}>
-          {buttons}
-        </View>
         <SwipeListView
           style={styles.container}
           swipeRowStyle={styles.rowStyle}
           data={displayConversations || conversations || []}
-          renderItem={({item}) => renderConversation(item, onPress)}
-          renderHiddenItem={({item}) => renderHiddenItem(item, ctx)}
+          renderItem={renderConversation}
+          renderHiddenItem={renderHiddenItem}
           disableLeftSwipe={false}
-          disableRightSwipe={true}
+          disableRightSwipe={false}
           recalculateHiddenLayout={false}
-          rightOpenValue={-120}
+          rightOpenValue={-180}
+          leftOpenValue={120}
           closeOnRowBeginSwipe={true}
-          keyExtractor={item => item.id}
+          keyExtractor={keyExtractor}
+          useNativeDriver
         />
       </ImageBackground>
     </View>
diff --git a/node_modules/react-native-chat-plugin/PhoneContactsScreen/PhoneContactsScreen.js b/node_modules/react-native-chat-plugin/PhoneContactsScreen/PhoneContactsScreen.js
index 731a30e..e5f6117 100644
--- a/node_modules/react-native-chat-plugin/PhoneContactsScreen/PhoneContactsScreen.js
+++ b/node_modules/react-native-chat-plugin/PhoneContactsScreen/PhoneContactsScreen.js
@@ -6,6 +6,9 @@ import { ChatContext } from "../ChatContext";
 import { NavigationPropType } from "../PropTypes";
 import LinearGradient from "react-native-linear-gradient";
 import { TouchableHighlight } from "react-native-gesture-handler";
+
+import SendSMS from 'react-native-sms'
+
 const styles = StyleSheet.create({
   container: {
     flex: 1,
@@ -103,6 +106,14 @@ const styles = StyleSheet.create({
     borderWidth: 1,
     borderColor: "#333",
   },
+  markedContactToggle: {
+    backgroundColor: "#bbb",
+    width: 20,
+    height: 20,
+    borderRadius: 20,
+    borderWidth: 1,
+    borderColor: "#333",
+  },
   headerStyle: {
     backgroundColor: "rgb(125,125,125)",
     padding: 20,
@@ -114,62 +125,107 @@ const styles = StyleSheet.create({
   }
 });
 
-const Contact = ({ctx, item}) => {
-  const [marked, setMarked] = React.useState(false);
-  const Icon = ctx.icon;
   
-  return (
-    <TouchableOpacity >
-      <LinearGradient style={styles.listItemContainer} colors={['#fff','#f3f3f3']}>
-        <Text style={styles.listItemLabel}>{item.value}</Text>
-        <View style={styles.contactToggle}>
-
-        </View>
-      </LinearGradient>
-    </TouchableOpacity>
-  );
+const onShare = async (numbers, navigation) => {
+  SendSMS.send({
+    body: 'Hey - Join Wevive, a social network for doing good. Here is the link - https://wevive.com',
+    recipients: numbers,
+    successTypes: ['sent', 'queued'],
+    allowAndroidSendWithoutReadPermission: true,
+  }, (completed, cancelled, error) => {
+    if (completed) {
+      navigation.navigate('SearchContactsScreen');
+    }
+    //console.warn('SMS Callback: completed: ' + completed + ' cancelled: ' + cancelled + 'error: ' + error);
+  });
+}
+const onShare2 = async () => {
+  try {
+    const result = await Share.share({
+      message:
+        'Hey - Join Wevive, a social network for doing good.' + (Platform.OS == 'android' ? "Here is the link - https://wevive.com" : ""),
+      url:
+        'https://wevive.com'
+    });
+    if (result.action === Share.sharedAction) {
+      if (result.activityType) {
+        // shared with activity type of result.activityType
+      } else {
+        // shared
+      }
+    } else if (result.action === Share.dismissedAction) {
+      // dismissed
+    }
+  } catch (error) {
+    alert(error.message);
+  }
 };
 
-const renderSectionHeader = (ctx, section) => {
-  const Icon = ctx.icon;
+const renderSectionHeader = (section) => {
   return (
     <View style={styles.sectionHeaderContainer}>
       <Text style={styles.sectionHeaderLabel}>{section.title}</Text>
-      
     </View>
   );
 };
 
-export default function ConversationList({ navigation }) {
+export default function PhoneContactsScreen({ navigation }) {
+
+  const toggleSelected = (item, marked) => {
+    if (marked < 0) {
+      setSelectedContacts(selectedContacts.concat([item.label]));
+    } else {
+      setSelectedContacts(selectedContacts.filter((r)=>(r != item.label)));
+    }
+  }
+  const Contact = ({item, marked}) => {
+    return (
+      <TouchableOpacity onPress={()=>toggleSelected(item, marked)}>
+        <LinearGradient style={styles.listItemContainer} colors={['#fff','#f3f3f3']}>
+          <Text style={styles.listItemLabel}>{item.value}</Text>
+          <View style={selectedContacts.indexOf(item.label) >= 0 ? styles.markedContactToggle : styles.contactToggle}>
+  
+          </View>
+        </LinearGradient>
+      </TouchableOpacity>
+    );
+  };
+
   const ctx = React.useContext(ChatContext);
+  const [selectedContacts, setSelectedContacts] = React.useState([]);
   const contacts = ctx.contacts;
   const goBack = () => {
     navigation.goBack();
   };
-  //console.error(contacts.length);
+  const goNext = () => {
+    onShare(selectedContacts, navigation);
+  }
+  const renderItem = (item) => <Contact key={item.value} item={item} marked={selectedContacts.indexOf(item.label)} />;
   return (
     <View style={styles.container}>
       <View style={styles.headerStyle}>
         <TouchableOpacity onPress={goBack}>
           <Text style={styles.headerButtonStyle}>Cancel</Text>
         </TouchableOpacity>
-        <TouchableOpacity onPress={goBack}>
+        {selectedContacts.length > 0 && <TouchableOpacity onPress={goNext}>
           <Text style={styles.headerButtonStyle}>Next</Text>
-        </TouchableOpacity>
+        </TouchableOpacity>}
       </View>
       <AlphabetList
         data={contacts}
         indexLetterColor={'white'}
         indexLetterSize={15}
         alphabetContainer={styles.alphabetContainer}
-        renderItem={(item) => <Contact item={item} ctx={ctx} />}
-        renderSectionHeader={(section) => renderSectionHeader(ctx, section)}
+        renderItem={renderItem}
+        renderSectionHeader={renderSectionHeader}
         letterItemStyle={styles.letterItemStyle}
       />
     </View>
   );
 }
 
-ConversationList.propTypes = {
+//PhoneContactsScreen.whyDidYouRender = true;
+
+PhoneContactsScreen.propTypes = {
   navigation: NavigationPropType,
 };
\ No newline at end of file
diff --git a/node_modules/react-native-chat-plugin/SearchContactsScreen/SearchContactsScreen.js b/node_modules/react-native-chat-plugin/SearchContactsScreen/SearchContactsScreen.js
index b708a42..da25d8e 100644
--- a/node_modules/react-native-chat-plugin/SearchContactsScreen/SearchContactsScreen.js
+++ b/node_modules/react-native-chat-plugin/SearchContactsScreen/SearchContactsScreen.js
@@ -1,5 +1,5 @@
 import React from "react";
-import { FlatList, View, StyleSheet, ActivityIndicator, Alert } from "react-native";
+import { FlatList, View, StyleSheet, ActivityIndicator, Alert, Text } from "react-native";
 
 import { NavigationPropType } from "../PropTypes";
 import PillButton from "../Components/PillButton";
@@ -9,7 +9,7 @@ import SearchResultComponent from "./SearchResultComponent";
 import { getSocket } from "../utils/SocketIOClient";
 import { ChatContext } from "../ChatContext";
 import { initEncryption } from "../utils/ChatEncryption";
-
+import AlphabetList from "react-native-flatlist-alphabet";
 import {
   SearchReducer,
   SearchInitialState,
@@ -27,8 +27,53 @@ const styles = StyleSheet.create({
     flex: 1,
     justifyContent: "center",
   },
+  headerStyle: {
+    backgroundColor: "rgb(125,125,125)",
+    padding: 20,
+    flexDirection: "row",
+    justifyContent: "space-between",
+  },
+  listItemContainer: {
+    padding: 20,
+    flexDirection: "row",
+    justifyContent: "space-between",
+    paddingRight: 50,
+  },
+  sectionHeaderContainer: {
+    backgroundColor: "rgb(125,125,125)",
+    paddingVertical: 7,
+    paddingHorizontal: 20,
+    
+  },
+  sectionHeaderLabel: {
+    fontWeight: "700",
+    color: "white",
+  },
+  alphabetContainer: {
+    backgroundColor: "rgb(145,145,145)",
+    borderRadius: 30,
+    alignSelf: "center",
+    flex: 1,
+    left: 50,
+    
+  },
+  letterItemStyle: {
+    //padding: 10,
+    height: 20,
+    width: 30,
+  },
 });
 
+const renderSectionHeader = (ctx, section) => {
+  const Icon = ctx.icon;
+  return (
+    <View style={styles.sectionHeaderContainer}>
+      <Text style={styles.sectionHeaderLabel}>{section.title}</Text>
+      
+    </View>
+  );
+};
+
 const renderContact = (contact, onPress) => {
   return <SearchResultComponent contact={contact} onPress={onPress} />;
 };
@@ -129,8 +174,7 @@ export default function SearchContactsScreen({ navigation }) {
         right={<PillButton text="Next" onPress={createChat} />}
         title="Add participants" />
 
-      <TextInput placeholder={"Search"} onChangeText={query => setQuery(query)} />
-
+      <TextInput multiline={true} placeholder={"Search"} onChangeText={query => setQuery(query)} />
       <FlatList
         style={styles.container}
         data={state.contacts}
diff --git a/node_modules/react-native-chat-plugin/index.js b/node_modules/react-native-chat-plugin/index.js
index 0d59b81..f8a56ff 100644
--- a/node_modules/react-native-chat-plugin/index.js
+++ b/node_modules/react-native-chat-plugin/index.js
@@ -7,29 +7,45 @@ export { addUnreadCountListener, updateCount } from "./utils/unread-counter";
 import { NativeModules } from 'react-native';
 import { SQLCipherClient } from "./utils/SQLCipherClient";
 import { initSocket } from "./utils/SocketIOClient";
-
+import { PermissionsAndroid } from 'react-native';
 export const { ChatPlugin } = NativeModules;
 import Contacts from 'react-native-contacts';
 
 
-export default function ChatModule({ socketIoUrl, options, icon }) {
+export default function ChatModule({ socketIoUrl, options, icon, children }) {
   const [contacts, setContacts] = React.useState([]);
-  const db = React.useMemo(()=> {
-    const getDB = async () => {
-      const db = await SQLCipherClient(options);
-      return db.database;
-    };
-    return getDB();
-  });
+  const getDB = async () => {
+    const db = await SQLCipherClient(options);
+    return db.database;
+  };
   React.useEffect(() => {
-    Contacts.getAll().then(fetchedContacts => {
-      setContacts(fetchedContacts.map((r)=>({value:r.givenName, label: r.givenName})));
-    });
+    if (Platform.OS == 'android') {
+      PermissionsAndroid.request(
+        PermissionsAndroid.PERMISSIONS.READ_CONTACTS,
+        {
+          'title': 'Contacts',
+          'message': 'This app would like to sync your contacts.',
+          'buttonPositive': 'Allow'
+        }
+      )
+      .then((err)=> {
+        Contacts.getAllWithoutPhotos().then(fetchedContacts => {
+          setContacts(fetchedContacts.filter((r)=>(r.givenName && r.givenName.length)).filter((r)=>(r.phoneNumbers.length > 0 && r.phoneNumbers[0].number.length)).map((r)=>({value:r.givenName, label: r.phoneNumbers[0].number})));
+        });
+      }
+      );
+    } else {
+      Contacts.getAllWithoutPhotos().then(fetchedContacts => {
+        setContacts(fetchedContacts.filter((r)=>(r.givenName && r.givenName.length)).filter((r)=>(r.phoneNumbers.length > 0 && r.phoneNumbers[0].number.length)).map((r)=>({value:r.givenName, label: r.phoneNumbers[0].number})));
+      });
+    }
   });
   initSocket(socketIoUrl);
   return (
-    <ChatContextProvider options={options} socketIoUrl={socketIoUrl} db={db} icon={icon} contacts={contacts}>
-      <ChatContainer options={options} />
+    <ChatContextProvider options={options} socketIoUrl={socketIoUrl} getDB={getDB} icon={icon} contacts={contacts}>
+      <ChatContainer options={options}>
+        {children}
+      </ChatContainer>
     </ChatContextProvider>
   );
 }
diff --git a/node_modules/react-native-chat-plugin/utils/SQLCipherClient.js b/node_modules/react-native-chat-plugin/utils/SQLCipherClient.js
index 8cb4565..e4f1191 100644
--- a/node_modules/react-native-chat-plugin/utils/SQLCipherClient.js
+++ b/node_modules/react-native-chat-plugin/utils/SQLCipherClient.js
@@ -4,7 +4,7 @@ SQLite.DEBUG(false);
 SQLite.enablePromise(true);
 
 let db = null;
-let db_version = 20;
+let db_version = 30;
 export function getEncryptionKeys(context) {
   return new Promise((resolve, reject) => {
     context.getDB().then((db) => {
@@ -146,9 +146,9 @@ export function SQLCipherClient(options) {
   return new Promise((resolve, reject) => {
     if (!db) {
       SQLite.openDatabase({
-        name: "chat_" + options.token.substring(0,4) + "_" + db_version + ".db",
+        name: "chat_" + db_version + ".db",
         location: "default",
-        key: options.token,
+        key: options.token.slice(0,10),
       }).then(
         (dbInstance) => {
           db = dbInstance;
@@ -165,13 +165,7 @@ export function SQLCipherClient(options) {
         },
       );
     } else {
-      createOrValidateDB(options.token).then(() => {
-        resolve({database: db});
-      }).catch(
-        () => {
-          reject("Failed to connect to DB");
-        },
-      );
+      resolve({database: db});
     }
   });
 }
\ No newline at end of file
